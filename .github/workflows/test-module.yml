name: Test Claude Flow Module

on:
  workflow_dispatch:
    inputs:
      test_branch:
        description: 'Branch name for test (leave empty for auto-generated)'
        required: false
        type: string
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'test/**'
      - 'docker/**'
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  test-with-dagger:
    name: Test Module with Dagger
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm ci

      - name: Build module
        run: npm run build

      - name: Install Dagger CLI
        run: |
          cd /tmp
          curl -fsSL https://dl.dagger.io/dagger/install.sh | sh
          sudo mv ./bin/dagger /usr/local/bin/
          dagger version

      - name: Run Dagger Test Workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_AUTH_TOKEN: ${{ secrets.ANTHROPIC_AUTH_TOKEN }}
          ANTHROPIC_BASE_URL: ${{ vars.ANTHROPIC_BASE_URL || 'https://api.anthropic.com' }}
        run: |
          dagger run node -e "
            const { runTestWorkflow } = require('./dist/test/workflow.js');
            
            runTestWorkflow(
              process.env.GITHUB_TOKEN,
              process.env.ANTHROPIC_AUTH_TOKEN,
              process.env.ANTHROPIC_BASE_URL
            ).then(result => {
              console.log(result);
              process.exit(result.includes('‚úÖ All tests passed') ? 0 : 1);
            }).catch(error => {
              console.error('Test failed:', error);
              process.exit(1);
            });
          "

  test-docker-integration:
    name: Test Docker Integration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Pull Docker image for ${{ matrix.platform }}
        run: docker pull --platform ${{ matrix.platform }} ghcr.io/liamhelmer/claude-flow-dagger:latest

      - name: Test claude-flow in container (${{ matrix.platform }})
        run: |
          docker run --rm \
            --platform ${{ matrix.platform }} \
            -e CLAUDE_FLOW_NON_INTERACTIVE=true \
            ghcr.io/liamhelmer/claude-flow-dagger:latest \
            claude-flow --version

      - name: Test hive-mind command (${{ matrix.platform }})
        run: |
          docker run --rm \
            --platform ${{ matrix.platform }} \
            -e CLAUDE_FLOW_NON_INTERACTIVE=true \
            ghcr.io/liamhelmer/claude-flow-dagger:latest \
            claude-flow hive-mind --help

  integration-test:
    name: Full Integration Test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm ci

      - name: Build module
        run: npm run build

      - name: Create test script
        run: |
          cat > test-integration.js << 'EOF'
          const { ClaudeFlowDagger } = require('./dist/index.js');
          const { dag } = require('@dagger.io/dagger');
          
          async function test() {
            console.log('üöÄ Starting Claude Flow Integration Test\n');
            
            const claudeFlow = new ClaudeFlowDagger();
            const workspace = dag.host().directory('.');
            
            const config = {
              env: {
                CLAUDE_FLOW_NON_INTERACTIVE: 'true',
                DEBUG: 'true'
              },
              nonInteractive: true
            };
            
            try {
              // Test 1: Version check
              console.log('Test 1: Checking version...');
              const version = await claudeFlow.getVersion(workspace, config);
              console.log(`‚úÖ Version: ${version}\n`);
              
              // Test 2: Health check
              console.log('Test 2: Running health check...');
              const health = await claudeFlow.healthcheck(workspace, config);
              console.log(`‚úÖ Health check passed\n`);
              
              // Test 3: Feature detection
              console.log('Test 3: Detecting features...');
              const features = await claudeFlow.features(workspace, config);
              console.log(`‚úÖ Features detected\n`);
              
              // Test 4: Custom command
              console.log('Test 4: Running custom command...');
              const custom = await claudeFlow.custom(
                ['--help'],
                workspace,
                config
              );
              console.log(`‚úÖ Custom command executed\n`);
              
              console.log('üéâ All integration tests passed!');
              return true;
            } catch (error) {
              console.error('‚ùå Test failed:', error);
              return false;
            }
          }
          
          test().then(success => {
            process.exit(success ? 0 : 1);
          });
          EOF

      - name: Run integration test
        run: node test-integration.js

  notify-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [test-with-dagger, test-docker-integration]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test-with-dagger.result }}" == "success" ] && \
             [ "${{ needs.test-docker-integration.result }}" == "success" ]; then
            echo "‚úÖ All tests passed successfully!"
          else
            echo "‚ùå Some tests failed"
            echo "Dagger test: ${{ needs.test-with-dagger.result }}"
            echo "Docker test: ${{ needs.test-docker-integration.result }}"
            exit 1
          fi