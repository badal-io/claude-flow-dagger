#!/bin/bash

# Claude Flow Dagger Module - Docker Test Script
# 
# This script tests the module using Docker directly without Dagger
# Usage: ./test/docker-test.sh

set -e

echo "üöÄ Claude Flow Docker Test Script"
echo "=================================="
echo ""

[[ -n "$GITHUB_TOKEN" ]] || GITHUB_TOKEN=$(gh auth token)

# Check required environment variables
if [ -z "$GITHUB_TOKEN" ]; then
    echo "‚ùå Error: GITHUB_TOKEN environment variable is required"
    echo "Please set: export GITHUB_TOKEN=your_github_token"
    exit 1
fi

if [ -z "$FUELIX_AUTH_TOKEN" ]; then
    echo "‚ùå Error: FUELIX_AUTH_TOKEN environment variable is required"
    exit 1
fi

# Set variables
REPO_URL="https://github.com/badal-io/claude-test-repo.git"
BRANCH_NAME="claude-flow-test-$(date +%s)"
ANTHROPIC_TOKEN="${ANTHROPIC_AUTH_TOKEN:-$CLAUDE_API_KEY}"
ANTHROPIC_BASE_URL="${ANTHROPIC_BASE_URL:-https://api.anthropic.com}"

echo "üìã Configuration:"
echo "  Repository: badal-io/claude-test-repo"
echo "  Branch: $BRANCH_NAME"
echo "  GitHub Token: ${GITHUB_TOKEN:0:8}..."
echo "  Anthropic Token: ${FUELIX_AUTH_TOKEN:0:8}..."
echo ""

# Create a temporary directory for the test
TEST_DIR=$(mktemp -d)
echo "üìÅ Working directory: $TEST_DIR"
echo ""

# Step 1: Clone the repository
echo "1Ô∏è‚É£ Cloning repository..."
rsync -av docker/default-workspace/ ${TEST_DIR}/default-workspace/ || exit 1
pushd "$TEST_DIR"
git clone "https://${GITHUB_TOKEN}@github.com/badal-io/claude-test-repo.git" workspace
rsync -av default-workspace/ workspace/

cd workspace

# Configure git
git config user.email "claude-flow-bot@example.com"
git config user.name "Claude Flow Bot"

# Step 2: Create a new branch
echo "2Ô∏è‚É£ Creating branch $BRANCH_NAME..."
git checkout -b "$BRANCH_NAME"

# Step 3: Run claude-flow with hive-mind using Docker
echo "3Ô∏è‚É£ Running claude-flow hive-mind..."
echo ""

popd

cp ${0%/*}/claude-flow-test.sh ${TEST_DIR}
docker pull ghcr.io/liamhelmer/claude-flow-dagger:latest || exit 1

set -x

echo "Initializing hive-mind..."
# Initialize hive-mind
#docker run --rm \
#    -v "${TEST_DIR}:/workspace" \
#    -w /workspace/workspace \
#    -e CLAUDE_FLOW_NON_INTERACTIVE=true \
#    -e FUELIX_AUTH_TOKEN="$FUELIX_AUTH_TOKEN" \
#    -e ANTHROPIC_MODEL="claude-sonnet-4" \
#    -e DEBUG=true \
#    --entrypoint /home/claude/.npm-global/bin/claude-flow \
#    ghcr.io/liamhelmer/claude-flow-dagger:latest \
#    hive-mind init --force --neural-enhanced

echo "build a nodejs hello world app" > ${TEST_DIR}/prompt

echo "spawning hive-mind..."
# Spawn hive-mind task
docker run --rm \
    -v "${TEST_DIR}:/workspace" \
    -w /workspace/workspace \
    -e CLAUDE_FLOW_NON_INTERACTIVE=false \
    -e FUELIX_AUTH_TOKEN="$FUELIX_AUTH_TOKEN" \
    -e ANTHROPIC_MODEL="claude-sonnet-4" \
    -e DEBUG=true \
    -p 11235:11235 \
    --entrypoint /workspace/claude-flow-test.sh \
    ghcr.io/liamhelmer/claude-flow-dagger:latest 
#2>&1 | tee $TEST_DIR/output.log || exit 1

CLAUDE_OUTPUT=$(cat ${TEST_DIR}/output.log)

# Step 4: Check for changes and commit
echo "4Ô∏è‚É£ Checking for changes..."
cd ${TEST_DIR}/workspace
if [ -n "$(git status --porcelain)" ]; then
    [[ -f .gitignore ]] || echo '.gitignore' >> .gitignore
    grep -q '.hive-mind' .gitignore || echo ".hive-mind" >> .gitignore
    grep -q '.claude-flow' .gitignore || echo ".claude-flow" >> .gitignore
    echo "‚úÖ Changes detected, committing..."
    git add -A
    git commit -m "feat: build hello world app with Claude Flow

Generated using Claude Flow Dagger module with hive-mind.
Branch: $BRANCH_NAME
Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
    
    # Push changes
    echo "üì§ Pushing to remote..."
    git push "https://${GITHUB_TOKEN}@github.com/badal-io/claude-test-repo.git" "$BRANCH_NAME"
else
    echo "‚ö†Ô∏è No changes detected"
    exit 1
fi

# Step 5: Create pull request using GitHub CLI in Docker
echo "5Ô∏è‚É£ Creating pull request..."

PR_BODY="## ü§ñ Claude Flow Generated Hello World App

This pull request was automatically generated by Claude Flow Dagger module using hive-mind.

### What was done:
- Initialized hive-mind collective intelligence
- Spawned task to build a Node.js hello world application
- Generated all necessary files and configuration

### Branch: $BRANCH_NAME
### Generated at: $(date -u +"%Y-%m-%dT%H:%M:%SZ")

---
*This PR was created automatically by Claude Flow Test Workflow*"

# Create PR using gh CLI
docker run --rm \
    -v "$(pwd):/workspace" \
    -w /workspace \
    -e GITHUB_TOKEN="$GITHUB_TOKEN" \
    ghcr.io/liamhelmer/claude-flow-dagger:latest \
    gh pr create \
        --base main \
        --head "$BRANCH_NAME" \
        --title "ü§ñ Claude Flow: Hello World App" \
        --body "$PR_BODY" \
        --repo badal-io/claude-test-repo

# Step 6: Test the generated app
echo "6Ô∏è‚É£ Testing the generated app..."
echo ""


# Look for JavaScript files
if [ -f "index.js" ] || [ -f "app.js" ] || [ -f "server.js" ] || [ -f "hello.js" ]; then
    echo "‚úÖ Found JavaScript files"
    
    # Find the main file
    MAIN_FILE=""
    for file in index.js app.js server.js main.js hello.js; do
        if [ -f "$file" ]; then
            MAIN_FILE="$file"
            break
        fi
    done
    
    if [ -n "$MAIN_FILE" ]; then
        echo "üìÑ Testing $MAIN_FILE..."
        
        # Install dependencies if package.json exists
        if [ -f "package.json" ]; then
            echo "üì¶ Installing dependencies..."
            docker run --rm \
                -v "$(pwd):/workspace" \
                -w /workspace \
                ghcr.io/liamhelmer/claude-flow-dagger:latest \
                npm install
        fi
        
        # Run the app
        OUTPUT=$(docker run --rm \
            -v "$(pwd):/workspace" \
            -w /workspace \
            ghcr.io/liamhelmer/claude-flow-dagger:latest \
            node "$MAIN_FILE" 2>&1)
        
        echo "Output: $OUTPUT"
        
        # Check for "hello world"
        if echo "$OUTPUT" | grep -qi "hello" && echo "$OUTPUT" | grep -qi "world"; then
            echo "‚úÖ App successfully outputs 'hello world'!"
        else
            echo "‚ö†Ô∏è App doesn't output 'hello world', but file was created"
            # Check file content
            if grep -qi "hello" "$MAIN_FILE" && grep -qi "world" "$MAIN_FILE"; then
                echo "‚úÖ File contains 'hello world' text"
            fi
        fi
    fi
else
    echo "‚ö†Ô∏è No JavaScript files found"
    # List what was created
    echo "Files created:"
    ls -la
fi

# Cleanup
echo ""
echo "üßπ Cleaning up..."
cd /
rm -rf "$TEST_DIR"

echo ""
echo "‚úÖ Test completed successfully!"
echo "Check the pull request at: https://github.com/badal-io/claude-test-repo/pulls"
